---
title: Mark's Ruby Version Manager Documentation
owner: Buildpacks
---

<strong><%= modified_date %></strong>

## <a id='cf-app-utils'></a>Overview of RVM##

RVM is a command-line tool for installing and managing Ruby versions and Ruby gems. It was created by Wayne E. Sequin. RVM stands for Ruby Version Manager.

RVM is very helpful when you are working on multiple projects that use different versions of Ruby.  RVM allows you to easily switch between different versions of Ruby which you have installed on your computer.  RVM also helps you avoid conflicts with Ruby gems that work only with specific Ruby versions.

The official website for RVM is: https://rvm.io/


## <a id='vcap-services-defines-database-url'></a>Check Your RVM ##

Check to see if RVM is installed by typing this command in your terminal: `rvm -v`

If RVM is installed you will see a message that shows the version number.

<pre class="terminal">
  $ rvm -v
  rvm 1.27.0 (latest) by Wayne E. Seguin <wayneeseguin@gmail.com>, Michal Papis <mpapis@gmail.com> [https://rvm.io/]
</pre>

If the reply includes `(latest)` then you know you have the latest version.  Otherwise download the latest version following the steps in the next section.


You can see useful information about RVM with this command: `rvm info`


<pre class="terminal">
  $ rvm info

  ruby-2.3.0:

  system:
    uname:       "Darwin Marks-MacBook-Air-2.local 15.6.0 Darwin Kernel Version 15.6.0: Mon Aug 29 20:21:34 PDT 2016; root:xnu-3248.60.11~1/RELEASE_X86_64 x86_64"
    system:      "osx/10.11/x86_64"
    bash:        "/bin/bash => GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin15)"
    zsh:         "/bin/zsh => zsh 5.0.8 (x86_64-apple-darwin15.0)"

  rvm:
    version:      "rvm 1.27.0 (latest) by Wayne E. Seguin <wayneeseguin@gmail.com>, Michal Papis <mpapis@gmail.com> [https://rvm.io/]"
    updated:      "14 hours 13 minutes 7 seconds ago"
    path:         "/Users/markmcquillen/.rvm"

  ruby:
    interpreter:  "ruby"
    version:      "2.3.0p0"
    date:         "2015-12-25"
    platform:     "x86_64-darwin15"
    patchlevel:   "2015-12-25 revision 53290"
    full_version: "ruby 2.3.0p0 (2015-12-25 revision 53290) [x86_64-darwin15]"

  homes:
    gem:          "/Users/markmcquillen/.rvm/gems/ruby-2.3.0"
    ruby:         "/Users/markmcquillen/.rvm/rubies/ruby-2.3.0"

  binaries:
    ruby:         "/Users/markmcquillen/.rvm/rubies/ruby-2.3.0/bin/ruby"
    irb:          "/Users/markmcquillen/.rvm/rubies/ruby-2.3.0/bin/irb"
    gem:          "/Users/markmcquillen/.rvm/rubies/ruby-2.3.0/bin/gem"
    rake:         "/Users/markmcquillen/.rvm/gems/ruby-2.3.0/bin/rake"

  environment:
    PATH:         "/Users/markmcquillen/.rvm/gems/ruby-2.3.0/bin:/Users/markmcquillen/.rvm/gems/ruby-2.3.0@global/bin:/Users/markmcquillen/.rvm/rubies/ruby-2.3.0/bin:/Users/markmcquillen/.rvm/bin:/Users/markmcquillen/.rbenv/shims:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/Applications/Postgres.app/Contents/Versions/9.3/bin:/usr/local/heroku/bin:/Users/markmcquillen/bin"
    GEM_HOME:     "/Users/markmcquillen/.rvm/gems/ruby-2.3.0"
    GEM_PATH:     "/Users/markmcquillen/.rvm/gems/ruby-2.3.0:/Users/markmcquillen/.rvm/gems/ruby-2.3.0@global"
    MY_RUBY_HOME: "/Users/markmcquillen/.rvm/rubies/ruby-2.3.0"
    IRBRC:        "/Users/markmcquillen/.rvm/rubies/ruby-2.3.0/.irbrc"
    RUBYOPT:      ""
    gemset:       ""
</pre>


## <a id='rails-applications-have-autoconfigured-database-yml'></a>Install RVM ##

Install RVM by typing this command in your terminal:
`\curl -L https://get.rvm.io | bash -s stable`

Close your terminal and reopen it.  
Check to see if RVM loaded correctly by typing this command:
`rvm | head -n 1`

The response should be: `= rvm` 

You can also check to see if RVM loaded correctly with this command:
`type rvm | head -1`

The response should be: `rvm is a function`

If RVM did not load correctly you may see a message that directs you to make changes to your `~/.bash_profile` or your `~/.bashrc file`.

For instance, you may need to change your export paths so they have `$PATH` at the beginnings of the strings rather than at the ends so that they look like this:



<pre class="terminal">
  export PATH="$PATH:/usr/local/heroku/bin"

  export PATH="$PATH:/Users/markmcquillen/bin"
</pre>


You may also need to add this line to your `~/.bash_profile` if it was not added automatically:

<pre class="terminal">
  [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
</pre>


Once you have made these changes, close the Terminal and open a new Terminal window.

## <a id='change-ruby-versions'></a>Install Ruby##

Install the latest version of Ruby and set it as default with this command:
`rvm use ruby --install --default`

Check the Ruby version with:
`ruby -v`

You can install any version of Ruby with: `rvm install VERSION`

For instance: `rvm install 1.9.2`

<p class='note'><strong>Note</strong>: You can check the path of RVM after installation with this
  command: <code>env | egrep -v '^PATH' | egrep '^rvm_path'</code></p>

## <a id='change-ruby-versions'></a>Change Ruby Versions ##

See what versions of Ruby you have installed with `rvm list`

<pre class="terminal">
  $ rvm list

  rvm rubies

     ruby-2.1.2 [ x86_64 ]
     ruby-2.1.6 [ x86_64 ]
  =* ruby-2.3.0 [ x86_64 ]

  # => - current
  # =* - current && default
  #  * - default

</pre>


To switch to a different version of Ruby, type: `rvm use VERSION`

For instance: `rvm use 1.9.2`

Type `ruby -v` to see that the Ruby version has changed.

Any gems you install will be for this version of Ruby.

If you want to switch back to the System Ruby type: `rvm system`


## <a id='migrate'></a>Isolate Ruby Versions##

You can set a Ruby version to a project so that the project will always use that Ruby version and the corresponding gems.

Create a `.rvmrc` file in the root directory of a Ruby project.

In the `.rvmrc` file type:  `rvm RUBY-VERSION@CHOOSE-ANY-NAME`

For example: `rvm 2.1.2@example-project`

Save and close the file.  

Type `cd ..` in the command-line to move to the parent directory then `cd` back into the project directory.

You will receive a message asking you if you trust the `.rvmcr` file.

<pre class="terminal">
  $ cd example-project
  You are using '.rvmrc', it requires trusting, it is slower and it is not compatible with other ruby managers,
  you can switch to '.ruby-version' using 'rvm rvmrc to ruby-version'
  or ignore this warning with 'rvm rvmrc warning ignore /Users/markmcquillen/Desktop/rvmrc/Ruby3/.rvmrc',
  '.rvmrc' will continue to be the default project file in RVM 1 and RVM 2,
  to ignore the warning for all files run 'rvm rvmrc warning ignore all.rvmrcs'.

  ********************************************************************************
  * NOTICE                                                                       *
  ********************************************************************************
  * RVM has encountered a new or modified .rvmrc file in the current directory,  *
  * this is a shell script and therefore may contain any shell commands.         *
  *                                                                              *
  * Examine the contents of this file carefully to be sure the contents are      *
  * safe before trusting it!                                                     *
  * Do you wish to trust '/Users/markmcquillen/Desktop/rvmrc/Ruby3/.rvmrc'?      *
  * Choose v[iew] below to view the contents                                     *
  ********************************************************************************
  y[es], n[o], v[iew], c[ancel]> 
</pre>

Type `y` for yes and press Enter.

You may receive a message that a gemset does not exist.

<pre class="terminal">
  Gemset 'ruby3' does not exist, 'rvm ruby-2.1.2 do rvm gemset create example-project' first, or append '--create'.
</pre>

Copy and paste the second quoted part of the message and run it in your command-line.  In this example: `rvm ruby-2.1.2 do rvm gemset create example-project`

Go the parent directory of the project by typing: `cd ..`

Change to a different Ruby version by typing:  `rvm use DIFFERENT-RUBY-VERSION`

For example:  `rvm use 2.3.0`

Check the ruby version by typing: `ruby -v`  

It will be the one you just changed to.  In this example, `2.3.0`.

`cd` back into your project and type:  `ruby -v`

The Ruby version will be the one you set for that project. In this example, `2.1.2`.

<pre class="terminal">
  $ ruby -v
  ruby 2.1.2p95 (2014-05-08 revision 45877) [x86_64-darwin13.0]
</pre>













